export const hint: { [name: string]: string } = {
  prog: 'a valid RISC-V statement',
  line: 'a valid RISC-V statement',
  stmt: 'a valid RISC-V statement',
  label: 'a valid label declaration',
  instruction: 'a valid RISC-V instrucion',
  rv32i: 'a valid RISC-V I extension instruction',
  rv32zifencei: 'a valid RISC-V Zifencei instruction',
  rv32zicsr: 'a valid RISC-V Zicsr instruction',
  rv32m: 'a valid RISC-V M extension instruction',
  rv32a: 'a valid RISC-V A extension instruction',
  rv32f: 'a valid RISC-V F extension instruction',
  rv32d: 'a valid RISC-V D extension instruction',
  rv32ipseudos: 'a valid RISC-V I extension pseudo-instruction',
  rv32zicsrpseudos: 'a valid RISC-V Zicsr extension pseudo-instruction',
  rv32fpseudos: 'a valid RISC-V F extension pseudo-instruction',
  rv32dpseudos: 'a valid RISC-V D extension pseudo-instruction',
  lui: 'lui x[rd], expr',
  auipc: 'auipc x[rd], expr',
  jal: 'jal x[rd], label',
  jalr: 'jalr x[rd], expr(x[rs1])',
  beq: 'beq x[rs1], x[rs2], label',
  bne: 'bne x[rs1], x[rs2], label',
  blt: 'blt x[rs1], x[rs2], label',
  bge: 'bge x[rs1], x[rs2], label',
  bltu: 'bltu x[rs1], x[rs2], label',
  bgeu: 'bgeu x[rs1], x[rs2], label',
  lb: 'lb x[rd], expr(x[rs1])',
  lh: 'lh x[rd], expr(x[rs1])',
  lw: 'lw x[rd], expr(x[rs1])',
  lbu: 'lbu x[rd], expr(x[rs1])',
  lhu: 'lhu x[rd], expr(x[rs1])',
  sb: 'sb x[rs2], expr(x[rs1])',
  sh: 'sh x[rs2], expr(x[rs1])',
  sw: 'sw x[rs2], expr(x[rs1])',
  addi: 'addi x[rd], x[rs1], expr',
  slti: 'slti x[rd], x[rs1], expr',
  sltiu: 'slti x[rd], x[rs1], expr',
  xori: 'xori x[rd], x[rs1], expr',
  ori: 'ori x[rd], x[rs1], expr',
  andi: 'andi x[rd], x[rs1], expr',
  slli: 'slli x[rd], x[rs1], expr',
  srli: 'srli x[rd], x[rs1], expr',
  srai: 'srai x[rd], x[rs1], expr',
  add: 'add x[rd], x[rs1], x[rs2]',
  sub: 'sub x[rd], x[rs1], x[rs2]',
  sll: 'sll x[rd], x[rs1], x[rs2]',
  slt: 'slt x[rd], x[rs1], x[rs2]',
  sltu: 'sltu x[rd], x[rs1], x[rs2]',
  xor: 'xor x[rd], x[rs1], x[rs2]',
  srl: 'srl x[rd], x[rs1], x[rs2]',
  sra: 'sra x[rd], x[rs1], x[rs2]',
  or: 'or x[rd], x[rs1], x[rs2]',
  and: 'and x[rd], x[rs1], x[rs2]',
  fence: 'fence',
  ecall: 'ecall',
  ebreak: 'ebreak',
  fencei: 'fence.i',
  csrrw: 'csrrw x[rd], csr, x[rs1]',
  csrrs: 'csrrs x[rd], csr, x[rs1]',
  csrrc: 'csrrc x[rd], csr, x[rs1]',
  csrrwi: 'csrrwi x[rd], csr, uimm',
  csrrsi: 'csrrsi x[rd], csr, uimm',
  csrrci: 'csrrci x[rd], csr, uimm',
  mul: 'mul x[rd], x[rs1], x[rs2]',
  mulh: 'mulh x[rd], x[rs1], x[rs2]',
  mulhsu: 'mulhsu x[rd], x[rs1], x[rs2]',
  mulhu: 'mulhu x[rd], x[rs1], x[rs2]',
  div: 'div x[rd], x[rs1], x[rs2]',
  divu: 'mul x[rd], x[rs1], x[rs2]',
  rem: 'rem x[rd], x[rs1], x[rs2]',
  remu: 'remu x[rd], x[rs1], x[rs2]',
  lrw: 'lr.w[.aq|.rl|.aqrl] x[rd], (x[rs1])',
  scw: 'sc.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amoswapw: 'amoswap.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amoaddw: 'amoadd.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amoandw: 'amoand.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amoorw: 'amoor.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amominw: 'amomin.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amomaxw: 'amomax.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amominu: 'amominu.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  amomaxu: 'amomaxu.w[.aq|.rl|.aqrl] x[rd], x[rs1], (x[rs2])',
  flw: 'flw f[rd], expr(x[rs1])',
  fsw: 'fsw f[rs2], expr(x[rs1])',
  fmadds: 'fmadd.s f[rd], f[rs1], f[rs2], f[rs3]',
  fmsubs: 'fmsub.s f[rd], f[rs1], f[rs2], f[rs3]',
  fmnadds: 'fmnadd.s f[rd], f[rs1], f[rs2], f[rs3]',
  fmnsubs: 'fmnsub.s f[rd], f[rs1], f[rs2], f[rs3]',
  fadss: 'fadd.s f[rd], f[rs1], f[rs2]',
  fsubs: 'fsub.s f[rd], f[rs1], f[rs2]',
  fmuls: 'fmul.s f[rd], f[rs1], f[rs2]',
  fdivs: 'fdiv.s f[rd], f[rs1], f[rs2]',
  fsqrts: 'fsqrt.s f[rd], f[rs1]',
  fsgnjs: 'fsgnj.s f[rd], f[rs1], f[rs2]',
  fsgnjns: 'fsgnjn.s f[rd], f[rs1], f[rs2]',
  fsgnjxs: 'fsgnjx.s f[rd], f[rs1], f[rs2]',
  fmins: 'fmin.s f[rd], f[rs1], f[rs2',
  fmaxs: 'fmax.s f[rd], f[rs1], f[rs2',
  fcvtws: 'fcvt.w.s x[rd], f[rs1]',
  fcvtwus: 'fcvt.wu.s x[rd], f[rs1]',
  fmvxw: 'fmv.x.w x[rd], f[rs1]',
  fmvxs: 'fmv.x.s x[rd], f[rs1]',
  feqs: 'feq.s x[rd], f[rs1], f[rs2]',
  flts: 'flt.s x[rd], f[rs1], f[rs2]',
  fles: 'fle.s x[rd], f[rs1], f[rs2]',
  fclasss: 'fclass.s x[rd], f[rs1]',
  fcvtsw: 'fcvt.s.w f[rd], x[rs1]',
  fcvtswu: 'fcvt.s.wu f[rd], x[rs1]',
  fmvwx: 'fmv.w.x f[rd], x[rs1]',
  fmvsx: 'fmv.s.x f[rd], x[rs1]',
  fld: 'fld f[rd], expr(x[rs1])',
  fsd: 'fsd f[rs2], expr(x[rs1])',
  fmaddd: 'fmadd.d f[rd], f[rs1], f[rs2], f[rs3]',
  fmsubd: 'fmsub.d f[rd], f[rs1], f[rs2], f[rs3]',
  fnmsubd: 'fnmsub.d f[rd], f[rs1], f[rs2], f[rs3]',
  fnmaddd: 'fnmadd.d f[rd], f[rs1], f[rs2], f[rs3]',
  faddd: 'fadd.d f[rd], f[rs1], f[rs2]',
  fsubd: 'fsub.d f[rd], f[rs1], f[rs2]',
  fmuld: 'fmul.d f[rd], f[rs1], f[rs2]',
  fdivd: 'fdiv.d f[rd], f[rs1], f[rs2]',
  fsqrtd: 'fsqrt.d f[rd], f[rs1], f[rs2]',
  fsgnjd: 'fsgnj.d f[rd], f[rs1], f[rs2]',
  fsgnjnd: 'fsgnjn.d f[rd], f[rs1], f[rs2]',
  fsgnjxd: 'fsgnjx.d f[rd], f[rs1], f[rs2]',
  fmind: 'fmin.d f[rd], f[rs1], f[rs2]',
  fmaxd: 'fmax.d f[rd], f[rs1], f[rs2]',
  fcvtsd: 'fcvt.s.d f[rd], f[rs1]',
  fcvtds: 'fcvt.d.s f[rd], f[rs1]',
  feqd: 'feq.d x[rd], f[rs1], f[rs2]',
  fltd: 'flt.d x[rd], f[rs1], f[rs2]',
  fled: 'fle.d x[rd], f[rs1], f[rs2]',
  fclassd: 'fclass.d x[rd], f[rs1]',
  fcvtwd: 'fcvt.w.d x[rd], f[rs1]',
  fcvtwud: 'fcvt.wu.d x[rd], f[rs1]',
  fcvtdw: 'fcvt.d.w f[rd], x[rs1]',
  fcvtdwu: 'fcvt.d.wu f[rd], x[rs1]',
  lapseudo: 'la x[rd], label',
  llapseudo: 'lla x[rd], label',
  lbpseudo: 'lb x[rd], label',
  lhpseudo: 'lh x[rd], label',
  lwpseudo: 'lw x[rd], label',
  sbpseudo: 'sb x[rs], label, x[rt]',
  shpseudo: 'sh x[rs], label, x[rt]',
  swpseudo: 'sw x[rs], label, x[rt]',
  noppseudo: 'nop',
  lipseudo: 'li x[rd], expr',
  mvpseudo: 'mv x[rd], x[rs]',
  negpseudo: 'neg x[rd], x[rs]',
  seqzpseudo: 'seqz x[rd], x[rs]',
  snezpseudo: 'snez x[rd], x[rs]',
  sltzpseudo: 'sltz x[rd], x[rs]',
  sgtzpseudo: 'sgtz x[rd], x[rs]',
  beqzpseudo: 'beqz x[rs], label',
  bnezpseudo: 'bnez x[rs], label',
  blezpseudo: 'blez x[rs], label',
  bgezpseudo: 'bgez x[rs], label',
  bltzpseudo: 'bltz x[rs], label',
  bgtzpseudo: 'bgtz x[rs], label',
  bgtpseudo: 'bgt x[rs], x[rt], label',
  blepseudo: 'ble x[rs], x[rt], label',
  bgtupseudo: 'bgtu x[rs], x[rt], label',
  bleupseudo: 'bleu x[rs], x[rt], label',
  jpseudo: 'j label',
  jalpseudo: 'jal label',
  jrpseudo: 'jr x[rs]',
  jalrpseudo: 'jalr x[rs]',
  retpseudo: 'ret',
  callpseudo: 'call label',
  tailpseudo: 'tail label',
  rdcyclepseudo: 'rdcycle[h] x[rd]',
  rdinstretpseudo: 'rdinstret[h] x[rd]',
  rdtimepseudo: 'rdtime[h] x[rd]',
  csrrpseudo: 'csrr x[rd], csr',
  csrwpseudo: 'csrw csr, x[rs]',
  csrspseudo: 'csrs csr, x[rs]',
  csrcpseudo: 'csrc csr, x[rs]',
  csrwipseudo: 'csrwi csr, uimm',
  csrsipseudo: 'csrwi csr, uimm',
  csrcipseudo: 'csrci csr, uimm',
  frcsrpseudo: 'frcsr x[rd]',
  fscsrpseudo: 'fscsr x[rd]',
  fscsr2pseudo: 'fscsr x[rd], x[rs]',
  frrmpseudo: 'frrm x[rd]',
  fsrmpseudo: 'fsrm x[rd]',
  fsrm2pseudo: 'fsrm x[rd], x[rs]',
  frflagspseudo: 'frflags x[rd]',
  fsflagspseudo: 'fsflags x[rd]',
  fsflags2pseudo: 'fsflags x[rd], x[rs]',
  flwpseudo: 'flw f[rd], label, x[rt]',
  fswpseudo: 'fsw f[rs], label, x[rt]',
  fmvspseudo: 'fmv.s f[rd], f[rs]',
  fabbspseudo: 'fabs.s f[rd], f[rs]',
  fnegspseudo: 'fneg.s f[rd], f[rs]',
  fldpseudo: 'fld f[rd], label, x[rt]',
  fsdpseudo: 'fsd f[rs], label, x[rt]',
  fmvdpseudo: 'fmv.d f[rd], f[rs]',
  fabsdpseudo: 'fabs.d f[rd], f[rs]',
  fnegdpseudo: 'fneg.d f[rd], f[rs]',
  byte: '.byte expr (, expr)*',
  half: '.half expr (, expr)*',
  word: '.word expr (, expr)*',
  float: '.float fexpr (, fexpr)*',
  ascii: '.ascii string',
  asciiz: '.string string',
  zero: '.zero number',
  bss: '.bss',
  data: '.data',
  rodata: '.rodata',
  text: '.text',
  globl: '.globl label (, label)*',
  align: '.align number',
  balign: '.balign number',
  file: '.file string',
  equ: '.equ symbol, expr',
  expr: 'a valid expression',
  parenexpr: 'a valid expression',
  unaryexpr: '(-|+) expr',
  plusexpr: 'expr + expr or expr - expr',
  intexpr: 'a valid integer number',
  hexexpr: 'a valid integer number',
  binexpr: 'a valid integer number',
  charexpr: 'a valid character',
  idexpr: 'a valid symbol',
  hirelexpr: '%hi(symbol)',
  lorelexpr: '%lo(symbol)',
  pcrelhirelexpr: '%pcrel_hi(symbol)',
  pcrellorelexpr: '%pcrel_lo(symbol)',
  fexpr: 'a valid expression',
  parenfexpr: 'a valid expression',
  unaryfexpr: '(-|+) expr',
  intfexpr: 'a valid floating-point number',
  hexfexpr: 'a valid floating-point number',
  binfexpr: 'a valid floating-point number',
  floatfexpr: 'a valid floating-point number',
  uimm: 'a valid unsigned immediate',
  static_data: 'a valid static data declaration',
  directive: 'a valid assembler directive'
};
